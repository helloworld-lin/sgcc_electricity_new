# 最终优化版Dockerfile - 最小化镜像
FROM python:3.12.11-slim-bookworm

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV SET_CONTAINER_TIMEZONE=true
ENV CONTAINER_TIMEZONE=Asia/Shanghai
ENV TZ=Asia/Shanghai
ENV LANG=C.UTF-8
ENV PYTHON_IN_DOCKER='PYTHON_IN_DOCKER'

# 创建非root用户
RUN groupadd -r appuser && useradd -r -g appuser appuser

# 安装系统依赖和Python包（合并到一个RUN命令以减少层数）
# 安装运行依赖，并增加 apt 重试（不通过 apt 安装 geckodriver）
RUN set -eux; \
    apt-get -o Acquire::Retries=5 -o Acquire::http::Timeout=30 update; \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
      firefox-esr \
      tzdata \
      jq \
      ca-certificates \
    ; \
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime; \
    echo $TZ > /etc/timezone; \
    dpkg-reconfigure --frontend noninteractive tzdata; \
    rm -rf /var/lib/apt/lists/*; \
    apt-get clean

# 创建应用目录
WORKDIR /app
RUN mkdir -p /data && chown -R appuser:appuser /app /data

# 复制requirements.txt并安装Python依赖
COPY requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r /tmp/requirements.txt \
    && rm -rf /tmp/* \
    && pip cache purge

# 手动下载并安装 geckodriver（支持 amd64 / arm64）
RUN set -eux; \
    ARCH=$(dpkg --print-architecture); \
    VER=v0.36.0; \
    case "$ARCH" in \
      amd64)  URL="https://github.com/mozilla/geckodriver/releases/download/$VER/geckodriver-$VER-linux64.tar.gz" ;; \
      arm64)  URL="https://github.com/mozilla/geckodriver/releases/download/$VER/geckodriver-$VER-linux-aarch64.tar.gz" ;; \
      *) echo "Unsupported arch: $ARCH"; exit 1 ;; \
    esac; \
    apt-get update && apt-get install -y --no-install-recommends wget tar; \
    wget -O /tmp/geckodriver.tgz "$URL" --retry-connrefused --tries=5 --timeout=30; \
    tar -xzf /tmp/geckodriver.tgz -C /usr/local/bin/; \
    chmod +x /usr/local/bin/geckodriver; \
    rm -f /tmp/geckodriver.tgz; \
    apt-get purge -y wget tar && apt-get autoremove -y && rm -rf /var/lib/apt/lists/*

# 复制应用代码
COPY scripts/*.py /app/
RUN chown -R appuser:appuser /app

# 切换到非root用户
USER appuser

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python3 -c "from scripts.ncc_matcher import SliderCaptchaMatcher; print('OK')" || exit 1

# 启动命令
CMD ["python3", "main.py"]

