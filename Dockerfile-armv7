# ARMv7架构优化Dockerfile - 最小化镜像
FROM python:3.12-slim-bookworm

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV SET_CONTAINER_TIMEZONE=true
ENV CONTAINER_TIMEZONE=Asia/Shanghai
ENV TZ=Asia/Shanghai
ENV LANG=C.UTF-8
ENV PYTHON_IN_DOCKER='PYTHON_IN_DOCKER'

# 创建非root用户
RUN groupadd -r appuser && useradd -r -g appuser appuser

# 安装系统依赖
RUN set -eux; \
    apt-get update; \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
      firefox-esr \
      tzdata \
      jq \
      ca-certificates \
      wget \
      tar \
      curl \
      python3-pip \
      python3-setuptools \
      python3-wheel \
      python3-dev \
      build-essential \
      gcc \
      g++ \
      gfortran \
      libopenblas-dev \
      liblapack-dev \
      pkg-config \
      libfreetype6-dev \
      libjpeg62-turbo-dev \
      libpng-dev \
      zlib1g-dev \
    ; \
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime; \
    echo $TZ > /etc/timezone; \
    dpkg-reconfigure --frontend noninteractive tzdata; \
    rm -rf /var/lib/apt/lists/*; \
    apt-get clean

# 创建应用目录
WORKDIR /app
RUN mkdir -p /data && chown -R appuser:appuser /app /data

# 智能安装numpy和Pillow（多重策略）
RUN set -eux; \
    pip install --no-cache-dir --upgrade pip setuptools wheel; \
    # 策略1: 尝试从piwheels获取预编译包（无强制二进制限制）
    echo "🎯 尝试从piwheels安装预编译包..."; \
    pip install --no-cache-dir --root-user-action=ignore \
      --find-links https://www.piwheels.org/simple \
      --prefer-binary \
      numpy==1.24.4 \
      Pillow==10.0.1 2>/dev/null || { \
        echo "❌ piwheels失败，尝试常规PyPI安装..."; \
        # 策略2: 使用PyPI，但优先二进制包
        pip install --no-cache-dir --root-user-action=ignore \
          --prefer-binary \
          numpy==1.24.4 \
          Pillow==10.0.1 || { \
            echo "❌ 1.24.4失败，尝试更低版本..."; \
            # 策略3: 使用更保守的版本
            pip install --no-cache-dir --root-user-action=ignore \
              --prefer-binary \
              numpy==1.21.0 \
              Pillow==8.4.0; \
          }; \
      }; \
    # 验证安装
    python3 -c "import numpy as np; print('✅ numpy version:', np.__version__, '- shape test:', np.array([1,2,3]).shape)"; \
    python3 -c "from PIL import Image; print('✅ PIL导入成功')"; \
    pip cache purge

# 复制requirements.txt并安装其他Python依赖
COPY requirements.txt /tmp/requirements.txt
RUN set -eux; \
    # 从requirements.txt中排除numpy和Pillow（已安装）
    grep -v "^numpy" /tmp/requirements.txt | grep -v "^Pillow" > /tmp/requirements_filtered.txt || echo "过滤完成"; \
    echo "📋 剩余依赖："; \
    cat /tmp/requirements_filtered.txt; \
    pip install --no-cache-dir --root-user-action=ignore -r /tmp/requirements_filtered.txt; \
    rm -rf /tmp/*; \
    pip cache purge; \
    # 最终验证：确保所有关键包都可用
    python3 -c "import numpy as np; import requests; import selenium; from PIL import Image; import sympy; print('✅ 所有关键依赖验证通过')"

# 智能下载geckodriver（ARMv7兼容版本）
RUN set -eux; \
    ARCH=$(dpkg --print-architecture); \
    echo "检测到架构: $ARCH"; \
    case "$ARCH" in \
      amd64)  VER=v0.35.0; URL="https://github.com/mozilla/geckodriver/releases/download/$VER/geckodriver-$VER-linux64.tar.gz" ;; \
      arm64)  VER=v0.35.0; URL="https://github.com/mozilla/geckodriver/releases/download/$VER/geckodriver-$VER-linux-aarch64.tar.gz" ;; \
      armhf)  VER=v0.34.0; URL="https://github.com/mozilla/geckodriver/releases/download/$VER/geckodriver-$VER-linux32.tar.gz" ;; \
      *) echo "不支持的架构: $ARCH"; exit 1 ;; \
    esac; \
    echo "下载 geckodriver $VER 从: $URL"; \
    wget -O /tmp/geckodriver.tgz "$URL" --retry-connrefused --tries=5 --timeout=30 || { \
        echo "主URL失败，尝试备用版本..."; \
        if [ "$ARCH" = "armhf" ]; then \
            VER=v0.33.0; \
            URL="https://github.com/mozilla/geckodriver/releases/download/$VER/geckodriver-$VER-linux32.tar.gz"; \
            wget -O /tmp/geckodriver.tgz "$URL" --retry-connrefused --tries=3 --timeout=30; \
        else \
            exit 1; \
        fi; \
    }; \
    tar -xzf /tmp/geckodriver.tgz -C /usr/local/bin/; \
    chmod +x /usr/local/bin/geckodriver; \
    geckodriver --version; \
    rm -f /tmp/geckodriver.tgz

# 复制应用代码
COPY scripts/*.py /app/
RUN chown -R appuser:appuser /app

# 切换到非root用户
USER appuser

# 健康检查（修正模块导入）
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python3 -c "from ncc_matcher import NCCMatcher; print('NCC Health Check OK')" || exit 1

# 启动命令
CMD ["python3", "main.py"]