# ARMv7架构运行环境镜像 - 不包含代码，仅提供运行环境
FROM python:3.12-slim-bookworm

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV SET_CONTAINER_TIMEZONE=true
ENV CONTAINER_TIMEZONE=Asia/Shanghai
ENV TZ=Asia/Shanghai
ENV LANG=C.UTF-8
ENV PYTHON_IN_DOCKER='PYTHON_IN_DOCKER'

# 安装系统依赖
RUN set -eux; \
    apt-get update; \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
      firefox-esr \
      tzdata \
      jq \
      ca-certificates \
      wget \
      tar \
      curl \
      file \
      python3-pip \
      python3-setuptools \
      python3-wheel \
      python3-dev \
      build-essential \
      gcc \
      g++ \
      gfortran \
      libopenblas-dev \
      liblapack-dev \
      pkg-config \
      libfreetype6-dev \
      libjpeg62-turbo-dev \
      libpng-dev \
      zlib1g-dev \
    ; \
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime; \
    echo $TZ > /etc/timezone; \
    dpkg-reconfigure --frontend noninteractive tzdata; \
    rm -rf /var/lib/apt/lists/*; \
    apt-get clean

# 创建数据目录（root权限）
RUN mkdir -p /data /data/errors /data/errors/screenshots

# 修复Python 3.12兼容性并安装numpy
RUN set -eux; \
    pip install --no-cache-dir --upgrade pip setuptools>=68.0.0 wheel; \
    echo "🎯 安装Python 3.12兼容的numpy..."; \
    pip install --no-cache-dir numpy>=1.26.0; \
    echo "🎯 安装Pillow..."; \
    pip install --no-cache-dir Pillow>=10.0.0; \
    python3 -c "import numpy as np; print('✅ numpy version:', np.__version__)"; \
    python3 -c "from PIL import Image; print('✅ PIL导入成功')"; \
    pip cache purge

# 复制requirements.txt并安装Python依赖
COPY requirements.txt /tmp/requirements.txt
RUN set -eux; \
    grep -v "^numpy" /tmp/requirements.txt | grep -v "^Pillow" > /tmp/requirements_filtered.txt || echo "过滤完成"; \
    echo "📋 安装依赖："; \
    cat /tmp/requirements_filtered.txt; \
    pip install --no-cache-dir -r /tmp/requirements_filtered.txt; \
    rm -rf /tmp/*; \
    pip cache purge; \
    python3 -c "import requests; import selenium; print('✅ 所有关键依赖验证通过')"

# 下载 ARMv7 版本的 geckodriver
# Mozilla 官方已停止提供 ARMv7 版本
# 使用社区编译版本: https://github.com/jamesmortensen/geckodriver-arm-binaries
RUN set -eux; \
    echo "📦 下载社区编译的 ARMv7 geckodriver..."; \
    VER=v0.33.0; \
    REPO="https://github.com/jamesmortensen/geckodriver-arm-binaries/releases/download"; \
    URL="$REPO/$VER/geckodriver-$VER-linux-armv7l.tar.gz"; \
    echo "🔗 URL: $URL"; \
    echo "📌 来源: jamesmortensen/geckodriver-arm-binaries (社区维护)"; \
    \
    wget -O /tmp/geckodriver.tgz "$URL" --retry-connrefused --tries=5 --timeout=30 || { \
        echo "⚠️  下载失败，尝试 v0.32.0..."; \
        VER=v0.32.0; \
        URL="$REPO/$VER/geckodriver-$VER-linux-armv7l.tar.gz"; \
        wget -O /tmp/geckodriver.tgz "$URL" --retry-connrefused --tries=3 --timeout=30; \
    }; \
    \
    tar -xzf /tmp/geckodriver.tgz -C /usr/local/bin/; \
    chmod +x /usr/local/bin/geckodriver; \
    echo "✅ Geckodriver 解压完成"; \
    echo "📋 验证安装:"; \
    file /usr/local/bin/geckodriver; \
    ls -lh /usr/local/bin/geckodriver; \
    /usr/local/bin/geckodriver --version || echo "⚠️  版本检查失败（可能需要在运行时验证）"; \
    rm -f /tmp/geckodriver.tgz; \
    echo "🎉 ARMv7 Geckodriver 安装完成"

# 工作目录
WORKDIR /data/scripts

# 使用 root 用户运行（最高权限）
# 不创建非root用户，直接以root运行

# 容器启动时执行的命令（可被 docker-compose 覆盖）
CMD ["python3", "main.py"]